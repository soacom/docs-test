---
layout: page
title: Enable HTTPS Access to the SOA Software Administration Console
description: Configure container system.properties to enable HTTPS access to the SOA Software Administration Console.
product: ag
category: learn
weight:	8
subcategory: Technical Note
type: page
nav-title: Enable HTTPS Access to the SOA Software Administration Console

---
<h2 name="top">Enable HTTPS Access to the SOA Software Administration Console</h2>

<p>Configure container system.properties to enable HTTPS  access to the SOA Software Administration Console.</p>


<div class = "divider1"></div>


<ol class="table_of_contents">

<br> <li><a href="#introduction">Introduction</a></li>
<li><a href="#configuration">Configuration</a></li>
<li><a href="#troubleshooting">Troubleshooting</a></li>

</ol>
  <div class = "divider1"></div>
  <a name="introduction">
<h3>Introduction</h3></a>

  <p>If you would like to faciliate your own role-based access to the SOA Software Administration Console, you can do so by enabling an HTTPS port.

  This process involves:</p>
  <ul class="usingOrderedList">
    <li>Adding an  HTTPS port to the  system.properties file of the Policy Manager, Network Director, or Agent  container instance folders (sm70\instances). </li>
    <li>Adding a new configuration category to the SOA Software Administration Console to control whether you want \admin access for both HTTP and HTTPS, or HTTPS only.</li>
  </ul>
  <p><a href="#top">Back to top</a></p>
  <h3><a name="configuration">Configuration</a></h3>
  <p>Let's take a quick walkthrough of the HTTPS configuration process to get your started. </p>
  <h5>Step 1: Add HTTPS Properties to system.properties</h5>
  <p>Go to the <strong>\sm70\instances</strong> folder where you would like to enable HTTPS and edit the system.properties file. In the following example we are updating the system.properties for the \PM70 folder (\sm70\instances\PM70).</p>
<p><img src="system_properties_folder.jpg" width="566" height="299"></p>
  <p> </p>
  <p>Add the two lines highlighted in bold to the<strong> system.properties</strong> file. These enable HTTPS for the container instance. We use port 9446 in this example. </p>
  <p><em>Note that you do not have to configure a container listener in Policy Manager to run the specified HTTPS port. </em></p>
  <p>Config for PM70<br>
    #Wed Feb 12 13:17:47 PST 2014<br>
    com.soa.http.bind.all=true<br>
  <strong>com.soa.http.bind.all.secure=true</strong><br>
    product.home=file\:/C\:/pm70ga/sm70/<br>
    org.eclipse.jetty.server.Request.maxFormContentSize=500000<br>
    felix.cm.dir=${felix.cache.rootdir}/cm<br>
    org.osgi.service.http.port=9000<br>
  <strong>org.osgi.service.http.port.secure=9446</strong><br>
    com.soa.provision.file.dir=${felix.cache.rootdir}/deploy<br>
    product.home.dir=C\:\\pm70ga\\sm70<br>
    com.soa.snapshot.directory=${felix.cache.rootdir}/snapshot<br>
    com.soa.provision.noInitialDelay=true<br>
    com.soa.http.host=hostname<br>
    com.soa.provision.bundles.start=true<br>
    com.soa.provision.poll=2000<br>
    org.eclipse.jetty.servlet.SessionCookie=JSESSIONID_PM70<br>
    felix.shutdown.hook=false<br>
  container.name=PM70</p>
  <h5>Step 2: Configure HTTPS Access to SOA Software Administration Console</h5>
<p>If you want access to the SOA Software Administration Console via HTTPS, you must add a new configuration category. </p>

<ul class="usingOrderedList">
<li>Create a new file in the \sm70 directory and call it:<br>
  <br>
  <strong>com.soa.admin.console.cfg</strong></li><br>

  <li>Add the following line to the file:<br><br>
    <strong>admin.console.access.restricted=true</strong> (if you want /admin access to be HTTPS only)<br>
    <br>
    <strong>admin.console.access.restricted=false</strong> (if you want /admin access to be HTTP and HTTPS)  </li>
  <br>

   <li>Copy the file to the  \deploy folder as illustrated below:<br>
     <br>
     <img src="admin_console_config.jpg" width="603" height="169"><br><br>
   </li>

   <li>Restart the container.
</li>
</ul>
<h5>Step 3: Test HTTPS Access to SOA Software Administration Console</h5>
  <p>When the container is up and running launch the SOA Software Administration console (https://localhost:&lt;port&gt;/admin/). It should only  accessible on the port defined in Step 1, and comply with the rules for the configuration category you selected as follows:  </p>

    <h5>com.soa.admin.console.cfg enabled (True)</h5>
    <ul>
      <li>You can access the SOA Software Administration Console through HTTPS port only. </li>
      <li>If you try to access SOA Software Administration Console using the default HTTP port you will receive a 404 error.</li>
    </ul>
<h5>com.soa.admin.console.cfg enabled (False)</h5>
  <ul>
      <li>You can access the SOA Software Administration Console through the HTTP port  and through the HTTPS port.</li>
  </ul>

  </li>
  </ul>
  <img src="admin_config_category.jpg" width="722" height="177"><br>
<br>
<p><a href="#top">back to top</a>
</p>
  <h3><a name="troubleshooting">Troubleshooting</a></h3>
<p>If everything appears to be configured correctly and you are receiving 404 errors when you try to launch Policy Manager or Network Director instances, review the following steps to attempt to troubleshoot the problem.</p>
<h5>Step 1: Inspect Log</h5>
  <p>Inspect the container logs in sm70\instances\&lt;instance name&gt;\logs and search for the following errors which occur near the startup:  </p>
  <p>Caused by: java.net.BindException: Address already in use<br>
    at java.net.PlainSocketImpl.socketBind(Native Method)<br>
    at java.net.PlainSocketImpl.bind(Unknown Source)<br>
    at java.net.ServerSocket.bind(Unknown Source)<br>
  at java.net.ServerSocket.&lt;init&gt;(Unknown Source) </p>
  <p>These errors mean that the container is trying to start its listener, but something is already listening.  </p>
  <h5>Step 2: Resolve</h5><br>


  <ol class="usingOrderedList">
  <li>Stop the container and check to make sure that nothing is running on the port that the container is configured to run on. <strong>If nothing is running</strong>, it means that the container is trying to start <strong>TWO</strong> listeners on the same port. </li>
  <li>Check system.properties in the container directory. It will have the listeners specified that the container uses on initial startup. For example:<br>
    <br>
com.soa.http.host=hostname <br>
org.osgi.service.http.port=9900<br>
org.osgi.service.http.port.secure=9446 <br>
com.soa.http.bind.all=true<br>
com.soa.http.bind.all.secure=true <br>
    </li>
  <li>Compare the host, port and bind settings above (for HTTP and HTTPS) with the actual Policy Manager listeners defined in the Policy Manager Management Console. (*.secure just refers to the HTTPS options â€“ the same rules apply to HTTP and HTTPS). If the ports specified in system.properties are different to the ports specified in Policy Manager, then the problem must exist elsewhere. If the port numbers match, then either: <br>
    <br>
    com.soa.http.bind.all in system.properties AND &quot;Bind to All Interfaces&quot; option for the HTTPS Container Listener in the Policy Manager Management Console must both be set, <br>
    <br>
    OR<br>
    <br>
The com.soa.http.host in system.properties and &quot;hostname&quot; in the Policy Manager Management Console  must match.<br>
<br>
<br>
The reason is that when Policy Manager starts its listener is tries to figure out if one already exists on the same port and host. If it finds one already running then it just uses it. If the host names are different (or they are not running on all interfaces) then it might not be able to find the listener already running and try to start a new one on the same port. <br>
  </li>
  </ol>

<p><a href="#top">back to top</a>
</p>
<div class = "divider1"></div>
