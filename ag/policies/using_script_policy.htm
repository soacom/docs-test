---
layout: page
title: Using the  QoS Script Policy
description: Learn how to add custom utility scripts for performing different actions to the policy definition    using JavaScript, Jython, or BeanShell script languages..
product: ag
category: learn
weight:	5
type: page
nav-title: Using the QoS Script Policy
---
  <h2 name="top">Using the  QoS Script Policy</h2>
<p>Learn how to add custom utility scripts for performing different actions to the policy definition    using JavaScript, Jython, or BeanShell script languages.</p>


<p><a href="../scripts/getting_started_with_scripts.htm" class="button secondary">Getting Started with Scripts</a></p>
<p><a href="http://docs.soa.com/ag/assets/scriptDocs/index.html" class="button secondary">Policy Manager Scripting API (7.0 / 7.1)</a> 
</p>
<p><a href="http://docs.soa.com/ag/assets/scriptDocs_pm72/index.html" class="button secondary">Policy Manager Scripting API (7.2)</a>
</p>
<p>
  
  
  
  
</p>
  <div class = "divider1"></div>
   <h3 style="color: gray;">Table of Contents</h3>

   <ol class="table_of_contents">

 <li><a href="#introduction">Introduction</a></li>

  <li><a href="#configuration">Configuration</a></li>


  </ol>
  <div class = "divider1"></div><p></p>



<a name="introduction">
<h3>Introduction</h3>
<p>The Quality of Service (QoS) Script Policy allows you to add custom utility scripts  for performing different actions to the policy definition using JavaScript, Jython,  or BeanShell script languages.</p>
</a>
<p>The Policy Manager Scripting API located in the \docs\scriptDocs folder of the  Policy Manager 7.x Release Folder provides a series of interfaces and classes you  can use to build process related scripts. The API includes lots of use cases and  sample code you can experiment with and use as a baseline when building your own  custom quota management scripts. </p>
<p>You can also access the API on the SOA Software Documentation Repository: </p>
<a href="http://docs.soa.com/ag/assets/scriptDocs/index.html" class="button secondary">Policy Manager Scripting API (7.0 / 7.1)</a> </p>

<a href="http://docs.soa.com/ag/assets/scriptDocs_pm72/index.html">Policy Manager Scripting API (7.2)</a>



<a name="introduction"></a>


<h3>Configuration Options</h3>
<p>The policy includes the following configuration options:</p>
<h5>Script Policy Details</h5>
<ul class="usingOrderedList">
  <li><strong>Name</strong> - A read-only field that displays the name of the Script Policy.</li>
  <li><strong>Description</strong> - A read-only field that displays the description of the Script Policy.</li>
</ul>
<h5>Script Policy</h5>
<ul class="usingOrderedList">
  <li><strong>Imports</strong> - Common functions that you may need to perform in your scripts that have been saved in Script objects using the Add Script function in the Scripts section of each Organization in the Policy Manager Workbench are listed in this section. The available scripts are listed in the Available Scripts tree. Any number of Scripts in that tree can be moved to the Imported Scripts list box. Only scripts that match the language type will be available for selection in the tree. </li>
  <li><strong>Script Language</strong> - A drop-down list box that allows you to select the script language for the script to be added. JavaScript, Jython, and BeanShell Engine script language types are supported. </li>
  <li><strong>Expression</strong> - A text box that allows you to enter your script. </li>
  <li><strong>Test Script </strong>- A button that allows you to test the entered expression to determine if it is properly formed.</li>
</ul>
<a name="configuration">
<h3>Configuration</h3></a>
<p>Let's take a quick walkthrough of the  Script Policy configuration process to get your started.</p>
<h5>Step 1: Review Script Creation Process</h5>
<p>The first step is to review  <a href="getting_started_with_scripts.htm" >Getting Started with Scripts</a> to become familiar with the script creation process, available tools, and the <a href="http://docs.soa.com/ag/assets/scriptDocs/index.html" class="button secondary">Policy Manager Scripting API (7.0 / 7.1)</a> or <a href="http://docs.soa.com/ag/assets/scriptDocs_pm72/index.html" class="button secondary">Policy Manager Scripting API (7.2)</a>.</p>
<h5>Step 2: Add Policy</h5>
<p>In Policy Manager, you can create a  Script Policy instance using <strong>Add Policy</strong> in the <em>Policies &gt; QoS Policies</em> section. </p>
<h5>Step 3: Modify Policy</h5>
<p>When you <strong>Modify</strong> the  Script Policy  on the <em>Policy Details</em> page the initial policy will look like this:</p>
<p><img src="images/modify script policy_screen1.jpg" width="587" height="411" /></p>
<p>Select the Script Language (JavaScript, Jython or BeanShell Engine), from the drop-down  list box, and enter your script into the &quot;Expression&quot; text box. Click <strong>Test Script</strong> to verify your script is properly formed. Make adjustments as needed. Click <strong>Finish</strong> to add your script, then Close to exit the wizard.</p>
<h5>Step 4: Attach Policy</h5>
<p>After you have saved your policy   attach it to a web service   operation.</p>
<h5>Step 5: Test Policy</h5>
<p>To test the policy, send a request and view the <em>Alerts</em> portlet in the <strong>Registry</strong> of the Organization Tree. An alert will be generated for each request sent.</p>
<p><a href="#top">Back to top</a></p>
<h3>Use Cases (Policy Manager-specific)</h3>
<p>Refer to the  <a href="http://docs.soa.com/docs-test/ag/scripts/getting_started_with_scripts.htm" target="_blank">Getting Started with Scripts</a>
topic for a walkthrough on how to use scripts and access to the Policy Manager Scripting API for each Policy Manager version. </p>

<p><a href="#top">Back to top</a></p>

<h3>Use Cases (Community Manager-specific)</h3>
<p>Click <a href="../assets/pm_qos/cm_script_policy_use_cases.pdf" target="_blank">here</a>
for a list of Community Manager-specific use cases for the  Script  Policy.</p>

<p><a href="#top">Back to top</a></p>

<div class = "divider1"></div>