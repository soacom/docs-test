---
layout: page
title: App Security
description: Learn how to configure app credentials.
product: cm
category: learn
subcategory: Create App
weight: 20
type: page
nav-title: 
no-nav: true
no-catalog: true
---

<h2 id="top">App Security</h2>

<p>Learn how to configure app credentials.</p>
<div class = "divider1"></div>

<h3 style="color: gray;">Table of Contents</h3>

<ol class="table_of_contents">
  <li><a href="#how_do_app_credentials_work"> How
do app credentials work?</a></li>
  <li><a href="#how_do_i_generate_a_shared_secret"> How do I generate a shared secret?</a></li>
  <li><a href="#what_rules_apply_to_generating_an_appid_and_shared_secret">What rules apply to generating an App ID and Shared Secret?</a></li>
  <li><a href="#how_do_i_transfer_an_app_defined_on_another_system_to_the_platform">How do I transfer an app defined on another system to the platform?</a></li>
  <li><a href="#how_do_i_determine_if_my_app_needs_oauth_credentials">How do I determine if my app needs OAuth credentials?</a></li>
  <li><a href="#how_do_i_configure_oauth_credentials">How do I configure OAuth credentials?</a></li>
  <li><a href="#how_do_i_configure_an_oauth_resource_url_and_application_type">How do I configure an OAuth Resource URL and Application Type?</a></li>
  <li><a href="#how_do_i_configure_a_resource_owner_oauth_authorization_page_for_my_app">How do I configure a Resource Owner OAuth  Authorization page for my app?</a></li>
  <li><a href="#what_are_the_oauth_20_client_types">What are the OAuth 2.0 Client Types?</a></li>
  <li><a href="#how_do_i_regenerate_a_shared_secret">How do I regenerate a shared secret?</a></li>
  <li><a href="#how_do_i_view_a_shared_secret">How do I view a shared secret?</a></li>
  <li><a href="#how_does_public_key_integration_work">How does public key integration work?</a></li>
  <li><a href="#what_is_a_certificate_signing_request">What is a Certificate Signing Request (CSR)?</a></li>
  <li><a href="#how_do_i_obtain_a_list_of_popular_certificate_authority_providers">How do I obtain a list of popular Certificate Authority Providers?</a></li>
  <li><a href="#what_is_a_trusted_ca_certificate">What is a Trusted CA Certificate?</a></li>
  <li><a href="#where_are_the_certificate_authorit_and_trusted_ca_certificate_files_stored">Where are the Certificate Authority and Trusted CA Certificate files stored?</a></li>
  <li><a href="#how_do_i_select_a_tool_for_generating_a_certificate_signing_request_csr">How  do I select a tool for generating a Certificate Signing Request (CSR)?</a></li>
  <li><a href="#how_do_i_import_a_certificate_signing_request">How do I import a certificate signing request?</a></li>
  <li><a href="#how_do_i_import_an_x509_certificate">How do I import an X.509 certificate?</a></li>
  <li><a href="#how_do_i_export_credentials">How do I export credentials?</a></li>
  <li><a href="#how_do_i_remove_app_credentials">How I remove app credentials?</a></li>
</ol>
<div class = "divider1"></div>



<a name="how_do_app_credentials_work"></a><h3>How do app credentials work?</h3>
<p>Authentication gives your app the ability to know the identity of an application user, and to interact with API data. Before configuring security for your app, you must first identity the protocol that is required by an API for performing authentication and authorization.</p>
<p><strong>Select App Protocol / Determine Credential Approach:</strong></p>
<p>Selection of a protocol for your app is based on the protocol supported by the API (e.g., plain text App Id, signed header with x.509 or a shared secret, or OAuth 1.0a or 2.0).</p>
<p>Each API is pre-configured as follows:</p>
<ul class="usingOrderedList">
  <li>Each API is assigned either an &quot;API Consumer Application Security Policy&quot; or &quot;OAuthSecurity Policy&quot; that is defined in the Tenant.</li>
  <li>If the API supports OAuth, the API's OAuth Provider configuration is set to the OAuth version and grant types it supports.</li>
</ul>
<p>The credential approach configured in the app must match the protocol supported by the API as defined in these policies. <em>Review the API documentation to verify the supported protocols.</em></p>
<p><strong>Configure Security Credentials:</strong></p>
<p>To authenticate your app when placing API calls, you must include your App ID and either a Shared Secret or your Public Key for PKI-based authentication (in the form of a CER or CSR).</p>
<ul class="usingOrderedList">
  <li>Please note that each version of your app requires a separate set of security credentials.</li>
  <li>Also note that you will need to obtain access to an API and you must configure credentials correctly in order to make a successful call to the API sandbox or production endpoint.</li>
</ul>
<p><strong>App Details &gt; Security:</strong></p>
<p>The <em>Security </em> section of the <em>App Details</em> page includes the <strong>Show Keys</strong> function that displays the Shared Secret and Public Key options for generating the credentials required to authenticate your app in   sandbox or production environments. For assistance in determining the security credentials method that best suits your needs, review the API documentation to verify the supported protocols.</p>
<p>When an app is initially created using the <strong>Add New App</strong> function, a shared secret is generated by default and can be viewed in the <em>App Details &gt; Security   </em> section by clicking <strong>Show Keys</strong> and selecting <strong>Click to View</strong>. You can use the <strong>Regenerate Key</strong> option to issue a new shared secret.</p>
<p> If you would like to use PKI-based encryption, you can use the <em>Public Key</em> option. The <strong>Import Credentials</strong> function allows you to upload a Certificate Signing Request (CSR) with your public key embedded or an X.509 Certificate (CER).</p>
<ul class="usingOrdered">
  <li>After you have uploaded the CSR, the Certificate Authority associated with Tenant generates a certificate and associates the certificate with your app.</li>
  <li>If you uploaded an X.509 Certificate, it is verified against the Trusted CA Certificate store on the Tenant. See <a href="#how_do_i_obtain_a_list_of_popular_certificate_authority_providers">How do I obtain a list of popular Certificate Authority Providers?</a> for more information.</li>
</ul>
<p><strong>OAuth 1.0a and 2.0:</strong></p>
<p>If you are using  OAuth 1.0a and the Authentication Code and Resource Owner Credentials grant, or OAuth 2.0 and the Authentication Code and Implicit grant, you must specify a Redirect URL and Application Type, then configure an authorization screen. This  task is performed in  addition to  configuring security credentials and is optional based on your requirements.</p>
<ul class="usingOrderedList">
  <li>The show OAuth Details section on the  <em>My Apps</em> page is used if the   OAuth Provider configuration of the API is set to OAuth 1.0a or OAuth 2.0 (with the grants stated above), and the &quot;OAuthSecurity Policy&quot; is selected in API configuration.</li>
  <li>Use the <strong>Edit OAuth Details</strong> function in the <em>App Details  &gt; Security </em>section to configure the &quot;Redirect URL&quot; and &quot;Application Type&quot; and configure a Resource Owner OAuth Authentication page. This function is accessible by clicking <strong>show</strong> <strong>OAuth Details &gt; Edit</strong>. The redirect option is used to specify the address of the authorization server and specify whether the application type is Confidential or Public. See <a href="#how_do_i_configure_an_oauth_resource_url_and_application_type">How do I configure an OAuth Resource URL and Application Type?</a></li>
  <li>Then use the <strong> Public Profile</strong> function to define a Resource Owner OAuth Authentication page. See <a href="#how_do_i_configure_a_resource_owner_oauth_authorization_page_for_my_app">. How do I configure a Resource Owner OAuth  Authorization page for my app?</a> for detailed instructions.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_generate_a_shared_secret"></a><h3>How do I generate a shared secret?</h3>
<p>When you initially create an app using the <strong>Add a New App </strong>function, a shared secret is automatically generated. You can regenerate or view the shared secret in the <em>Security  &gt; Shared Secret </em>section of <em>My Apps &gt; App Details</em> by selecting <strong>Show Keys &gt; Regenerate Key</strong>.</p>
<p><a href="#top">Back to top</a></p>



<a name="what_rules_apply_to_generating_an_appid_and_shared_secret"></a><h3>What rules apply to generating an App ID and Shared Secret?</h3>
<p>Before you add an app to the platform, review the following rules for generating an App ID or Shared Secret to determine the best approach for adding and managing your apps.</p>
<p><strong>App ID:</strong></p>
<ul class="usingOrderedList">
  <li>When an app is created, you can specify a custom App ID. If the App ID field is left blank, the app is randomly assigned an App ID (i.e., identity) in the format &lt;fedmember&gt; - &lt;random-hex&gt;.</li>
  <li>Once an App ID is assigned it cannot be changed for the current app version.</li>
  <li>A new App ID can be assigned to a new app version using the <strong>+Version</strong> function on the <em>App Details</em> page and entering a new App ID in the &quot;App Runtime ID&quot; field.</li>
  <li>You cannot update an App ID using the <strong>Edit</strong> function on the <em>App Details</em> page. A new App ID can only be issued at the time the initial app is created using the <strong>Add a New App</strong> function, or when creating a new app version using the <strong>+Version</strong> function.</li>
</ul>

<p><strong>Shared Secret:</strong></p>

<ul class="usingOrderedList">
  <li>When an app is created, you can specify a custom Shared Secret. If the Shared Secret field is left blank, a shared secret is automatically generated and can be viewed using the <strong>Show Keys</strong> function on the <em>App Details</em> page.</li>
  <li>A Shared Secret can be regenerated for a specific app using the <strong>Regenerate Key</strong> function on the <em>App Details</em> page.</li>
  <li>You cannot update a Shared Secret using the <strong>Edit</strong> function on the <em>App Details</em> page. Use the <strong>Regenerate Key</strong> function to perform this action.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_transfer_an_app_defined_on_another_system_to_the_platform"></a><h3>How do I transfer an app defined on another system to the platform?</h3>
<p>If you have an app that you have defined on another system that includes an App ID or Shared Secret you can transfer it to the platform based on the following scenarios:</p>
<ul class="usingOrderedList">
  <li><strong>New App</strong> – If this is the first app version of your app, you can add it using the <strong>Add a New App</strong> function via the <em>Plus</em> menu and specify the App ID in the &quot;App Runtime ID&quot; field, and the Shared Secret in the &quot;App Runtime ID&quot; field. See <a href="create_app_creation.htm#how_do_i_create_a_new_app">How
  do I create a new app?</a> for more information.</li>
  <li><strong>App Version</strong> – If you would like to add an app defined on another system as a &quot;version&quot; of an app that is currently added to the platform, you can use the <strong>–Version</strong> function on the <em>App Details</em> page and specify the custom App ID in the &quot;App Runtime ID&quot; field, and custom Shared Secret (if applicable) in the &quot;App Runtime ID&quot; field. See <a href="create_app_versioning.htm#how_do_i_create_a_new_version_of_my_app">How
 do I create a new version of my app?</a> for more information.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_determine_if_my_app_needs_oauth_credentials"></a><h3>How do I determine if my app needs OAuth credentials?</h3>
<p>To verify what version of OAuth an API supports, consult the supporting documentation of the API. Then refer to  <a href="#how_do_app_credentials_work">How do app credentials work?</a> and <a href="#how_do_i_configure_oauth_credentials">How do I configure OAuth credentials?</a> to continue the process.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_configure_oauth_credentials"></a><h3>How do I configure OAuth credentials?</h3>
<p>If the API your app is connected to uses OAuth 1.0a (with the Authentication Code and Resource Owner Credentials grant types), or OAuth 2.0 (with Authentication Code and Implicit grant types), you will need to:</p>

<ul class="usingOrderedList">
  <li>Configure a Shared Secret or Public Keys. See   <a href="#how_do_i_generate_a_shared_secret">How do I generate a shared secret?</a>, <a href="#how_do_i_import_a_certificate_signing_request">How do I import a certificate signing request?</a>, or <a href="#how_do_i_import_an_x509_certificate">How do I import an X.509 certificate?</a></li>
  <li>Configure a Resource URL and Application Type for   the OAuth versions listed above. See <a href="#how_do_i_configure_an_oauth_resource_url_and_application_type">How do I configure an OAuth Resource URL and Application Type?</a></li>
  <li>Configure Resource Owner OAuth Authorization page which allows app  developers to provide different details for branding to  app users and customers. See <a href="#how_do_i_configure_a_resource_owner_oauth_authorization_page_for_my_app">How do I configure a Resource Owner OAuth  Authorization page for my app?</a></li>
</ul>

<p><a href="#top">Back to top</a></p>



<a name="how_do_i_configure_an_oauth_resource_url_and_application_type"></a><h3>How do I configure an OAuth Resource URL and Application Type?</h3>
<p>To configure an OAuth Resource URL and Application Type:</p>
<ol>
  <li>Navigate to <em> App Details &gt; Security</em>.</li>
  <li>Click <strong>Show OAuth Details</strong>. The &quot;Redirect URL&quot; and &quot;Application Type&quot; currently assigned to the app displays.</li>
  <li>To update the information, click <strong>Edit</strong>. The<em> Edit OAuth Details</em> page displays <span> for configuring the </span><span> Redirect URL and Application Type:</span>
    <ul class="usingUnorderedList">
      <li>Redirect URL&#8212;Specify the URL  address of the authorization server that the resource owner will be redirected to.</li>
      <li>Application Type&#8212;Click the radio button to indicate if your app type is Public or Confidential. See <a href="#what_are_the_oauth_20_client_types">What are the OAuth 2.0 Client Types?</a> for more information.</li>
    </ul>
</li>
  <li>Click <strong>Save</strong> to commit your changes.</li>
  <li>For information on testing OAuth authorization of your app and sending a request, see <a href="test.htm#how_do_i_test_authorization_of_my_app_with_oauth_using_the_dev_console">How do I test authorization of my app with OAuth using the Dev Console?</a></li>
  <li>After completing the configuration, continue to the <a href="#how_do_i_configure_a_resource_owner_oauth_authorization_page_for_my_app">How do I configure a Resource Owner Authorization page for my app?</a> procedure to configure your OAuth authorization screen.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_configure_a_resource_owner_oauth_authorization_page_for_my_app"></a><h3>How do I configure a Resource Owner OAuth Authorization page for my app?</h3>
<p>If the API your app is connected to uses an OAuth &quot;Authentication Code&quot;  grant and you've configured a Redirect URL and Application Type using the <a href="#how_do_i_configure_oauth_credentials">How do I configure OAuth credentials?</a> procedure, the next step is to configure a Resource Owner  OAuth Authorization page. This screen allows app  developers to provide different details for branding to  app users and customers.</p>
<p>To configure a Resource Owner OAuth Authorization page  for your app:</p>
<ol>
  <li>Navigate to <em>My Apps.</em>
    <ul class="usingUnorderedList">
      <li>Select the <strong>App  Name</strong> on the summary listing. The <em>App Details</em> page displays.</li>
      <li>Select an app version from the <strong>Current</strong> <strong>Version</strong> drop-down menu.</li>
    </ul>
</li>
  <li>Click <strong>Edit Public Profile</strong>. The <em>Edit Public Profile</em> screen displays.</li>
  <li>Specify the following information to display on your app authorization screen. An example field name is specified for each screen element that maps to the illustration below.
    <ul class="usingUnorderedList">
    <li>Title&#8212;Represents the app title that will display  (e.g., My App).</li>
    <li>Sub-Title&#8212;Represents sub-title or tag-line (e.g., About This App).</li>
    <li>Website URL&#8212;Represents the URL that will invoke the authorization screen.</li>
    <li>Description&#8212;Represents the description of the app that displays below the sub-title (e.g., This is the app description).</li>
    <li>Legal Disclaimer&#8212;Represents any copyright or legal information (e.g., 2012 &lt;Company Name&gt; All rights reserved).</li>
    <li>Logo&#8212;Allows you to upload a logo for the resource. The logo should be 50px high. See <a href="basics_account_management.htm#how_do_i_upload_and_crop_icons">How do I upload and crop icons?</a> for more information.</li>
  </ul>
</li>
  <li>After configuring your authorization screen, click <strong>Save</strong>.</li>
  <li>During the OAuth authorization process, you will first receive a Resource Owner Authentication page where you will perform a user login. This page may be provided by the platform if it was defined in OAuth Provider, or may be provided directly by an identity provider such as Facebook or Google. After a successful login, the Resource Owner Authorization page displays (i.e., the <em>Public Profile</em> page which you defined above).
    <ul class="usingUnorderedList">
      <li>Additional elements display on the authentication screen that are pulled from the OAuth Provider configuration assigned to the API the app is connected too. These include Site Logo and Grant Properties. <br />
    <br />
    The screen will look similar to the following:<br />
    <br />
    <img src="images/oauth app authorization screen.jpg" width="376" height="309" alt="" /></li>
    </ul>
</li>
</ol>

<p><a href="#top">Back to top</a></p>



<a name="what_are_the_oauth_20_client_types"></a><h3>What are the OAuth 2.0 Client Types?</h3>
<ul class="usingOrderedList">
  <li><strong>Confidential Client</strong>&#8212;This client type is an application that is capable of keeping a client password confidential to the world. This client password is assigned to the client app by the authorization server. This password is used to identify the client to the authorization server, to avoid fraud. An example of a confidential client could be a web app, where no one but the administrator can get access to the server, and see the client password.</li>
  <li><strong>Public Client</strong>&#8212;This client type  is an application that is not capable of keeping a client password confidential. For instance, a mobile phone application or a desktop application that has the client password embedded inside it. Such an application could get cracked, and this could reveal the password. The same is true for a JavaScript application running in the user's browser. The user could use a JavaScript debugger to look into the application, and see the client password.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_regenerate_a_shared_secret"></a><h3>How do I regenerate a shared secret?</h3>
<p>If for any reason it becomes necessary to reissue the shared secret, you can use the <strong>Regenerate Key</strong> function.</p>
<p>To regenerate a shared secret:</p>
<ol>
  <li>Navigate to <em>My Apps.</em>
    <ul class="usingUnorderedList">
      <li>Select the <strong>App  Name</strong> on the summary listing. The <em>App Details</em> page displays.</li>
      <li>Select an app version from the <strong>Current</strong> <strong>Version</strong> drop-down menu.</li>
      </ul>
  </li>
  <li>In the <em>Security  </em> <em>&gt;  Shared Secret</em> section, click  <strong>Show Keys</strong> to display the key generation options.</li>
  <li>Click <strong>Regenerate  Key</strong>. The shared secret is reissued and the <em>Shared secret updated</em> message displays. Use <strong>Click to View</strong> to display the new shared secret key.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_view_a_shared_secret"></a><h3>How do I view a shared secret?</h3>
<p>To view the current shared secret:</p>
<ol>
  <li>Navigate to <em>My Apps.</em>
    <ul class="usingUnorderedList">
      <li>Select the <strong>App  Name</strong> in the summary listing. The <em>App Details</em> page displays.</li>
      <li>Select an app version from the <strong>Current</strong> <strong>Version</strong> drop-down menu.</li>
    </ul>
</li>
  <li>In the <em>Security </em> section, click  <strong>Show Keys</strong> to display the key generation options.</li>
  <li>Select <strong>Click to View</strong> to display the current shared secret.</li>
</ol>

<p><a href="#top">Back to top</a></p>



<a name="how_does_public_key_integration_work"></a><h3>How does public key integration work?</h3>
<p>If you use the <strong>Public Key</strong> option, you must import an existing X.509 Certificate  (CER) or Certificate Signing Request (CSR). Usage of either public key option is based on your requirements. The Tenant can be configured with an  internal Certificate Authority, and could also be configured with a set of  Trusted CA Certificates apart from the internal Certificate Authority.</p>
<p>The following rules apply:</p>
<p><strong> Prerequisites:</strong></p>
<p>Based on the established public key strategy for your platform at least one of the following Public Key options must be established on the Tenant before you can successfully import a Certificate Signing Request (CSR) or X.509 Certificate (CER).</p>
<ul class="usingOrderedList">
  <li>A  Certificate Authority (CA) (internal or third-party) that can issue and renew X.509 certificates must be previously configured in the Tenant. See <a href="#what_is_a_certificate_signing_request">What is a Certificate Signing Request (CSR)?</a> for more information.</li>
  <li>Trusted CA Certificates that may be required must be uploaded to the <em>Trusted CA Certificates</em> section of the Tenant. See <a href="#what_is_a_trusted_ca_certificate">What is a Trusted CA Certificate?</a> for more information.</li>
</ul>
<p>Configuring an internal Platform Certificate Authority is a  post installation task that is performed by the  Site Administrator. In most cases, a formal CA  (e.g., VeriSign) that aligns with the security policy requirements is uploaded, in addition to any Trusted CA Certificates that may be required.</p>
<p> If you receive an error message indicating that the X.509 Certificate or Certificate Signing Request (CSR)  you are attempting to import is not trusted or that a Certificate Authority does not exist.</p>
<p><strong>Import Certificate Signing Request (CSR):</strong></p>
<ul class="usingOrderedList">
  <li>If the Tenant is configured with a Certificate Authority, you can generate a Certificate Signing Request (CSR) using an online tool, and import it using the <strong>Import Credentials</strong> function in <em>App Details </em> <em>&gt; Security  &gt; Public Keys </em>section.</li>
  <li>If the import is successful, the CSR and the  Certificate Authority (CA) associated with the platform are used to generate the certificate for the app.</li>
  <li>See <a href="#how_do_i_select_a_tool_for_generating_a_certificate_signing_request_csr">How  do I select a tool for generating a Certificate Signing Request (CSR)?</a> and <a href="#how_do_i_import_a_certificate_signing_request">How do I import a certificate signing request?</a> for more information.</li>
</ul>
<p><strong>X.509 Certificates (CER):</strong></p>
<ul class="usingOrderedList">
  <li>If your Tenant is configured with Trusted CA Certificates, you can import an X.509 Certificate (CER) for the current app using the <strong>Import Credentials</strong> function in the <em>App Details &gt; Security  &gt; Public Keys</em> section.</li>
  <li>The CER import will be successful if it matches the Trusted CA Certificate that is uploaded to the <em>Trusted CA Certificates</em> section of the Tenant.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="what_is_a_certificate_signing_request"></a><h3>What is a Certificate Signing Request (CSR)?</h3>
<p>A Certificate  Signing Request (CSR) is a file that includes encoded information generated by  a web server. It is sent from an applicant to Certificate Authority to request a  digital certificate. The CSR contains information identifying the applicant and  the public key chosen by the applicant. Before creating a CSR, the applicant  first generates a key pair, keeping the private key secret. The corresponding  private key is not included in the CSR, but is used to digitally sign the entire  request.</p>
    <p>
    A CSR file typically has a .CSR extension but can have other  extensions based on the source application that generated the file. The Tenant supports the PEM (which is a BASE64 encoded PKCS10) for Certificate  Signing Requests.</p>
  <p>In the platform, a CSR is used to send a request to the Certificate Authority  stored on the Tenant to request an X.509 Certificate.</p>
  <p>The Tenant must be configured with a Certificate Authority prior to  importing a CSR. This task is performed by the Site Administrator.</p>

<p><a href="#top">Back to top</a></p>



<a name="how_do_i_obtain_a_list_of_popular_certificate_authority_providers"></a><h3>How do I obtain a list of popular Certificate Authority Providers?</h3>
<p>Refer to the &quot;Certificate Authority&quot; wiki for more information and an up-to-date list of popular Certificate Authority Providers.</p>
<p><a href="#top">Back to top</a></p>



<a name="what_is_a_trusted_ca_certificate"></a><h3>What is a Trusted CA Certificate?</h3>
<p>A Trusted Certificate Authority (CA) is a third party  identity that is qualified with a specified level of trust. Trusted CA  Certificates are used when an identity is being validated as the entity it  claims to be. Certificates imported into Tenant must be issued by a  Trusted CA Authority.</p>
<p>Trusted CA Certificates must be configured prior to  importing X.509 certificates for platform apps. This task is performed by the Site Administrator.</p>

<p><a href="#top">Back to top</a></p>



<a name="where_are_the_certificate_authorit_and_trusted_ca_certificate_files_stored"></a><h3>Where are the Certificate Authority and Trusted CA Certificate files stored?</h3>
<p>The platform Certificate Authority and Trusted CA Certificate files are stored on the Tenant. The Tenant is a distinct developer portal and community that is logical separated from any other communities that may be hosted in the same product instance. The Tenant is managed by the Site Administrator.</p>

   <p><a href="#top">Back to top</a></p>



<a name="how_do_i_select_a_tool_for_generating_a_certificate_signing_request_csr"></a><h3>How  do I select a tool for generating a Certificate Signing Request (CSR)?</h3>
<p>There are a variety of different tools you can  you can use to generate a Certificate Signing Request (CSR). For example, Keytool and OpenSSL are popular CSR generation tools.</p>
<ul class="usingOrderedList">
  <li>Perform an online inquiry using search strings like <strong>tools, certificate signing request</strong> or <strong>How do I generate a certificate signing request externally?</strong></li>
  <li>The results will provide  all the information you need to select a tool that will work for you and meet your requirements.</li>
</ul>
<p>In the context of the platform the process is as follows:</p>
<ol>
  <li>Generate a public and private key using an  external tool. Use your private key to sign your API call. Use your public key to generate the Certificate Signing Request.</li>
  <li>Generate the Certificate Signing Request (CSR) using  an external tool as well.</li>
  <li>Import the CSR into the platform. This is done  using the <strong>Import Credentials </strong> function. See <a href="#how_do_app_credentials_work">How do app credentials work?</a></li>
  <li>Obtain a copy of the generated certificate. This  is done using the <strong>Export  Credentials</strong> function. See <a href="#how_do_i_export_credentials">How do I export credentials?</a></li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_import_a_certificate_signing_request"></a><h3>How do I import a certificate signing request?</h3>
<p>To import a certificate signing request (CSR):</p>
<ol>
  <li>Navigate to <em>My Apps.</em>
    <ul class="usingUnorderedList">
      <li>Select the <strong>App  Name</strong> on the summary listing. The <em>App Details</em> page displays.</li>
      <li>Select an app version from the <strong>Current</strong> <strong>Version</strong> drop-down menu.</li>
    </ul>
</li>
  <li>Navigate to the <em>Security  </em>section and  click <strong>Show Keys</strong> to display the key generation options. In the <em>Public Key</em> section, click <strong>Import Credentials</strong>. The <em> Import Credentials </em> pop-up displays.</li>
  <li>Click <strong>Browse</strong> and navigate the directory structure to target your certificate file.</li>
  <li>Select the file and click <strong>Save</strong>.</li>
  <li>The Certificate Signing Request (CSR) is  imported and the certificate is generated. If the CSR you are attempting to  upload is expired or invalid, or a Certificate Authority does not exist on the Tenant you will receive  an error message.</li>
</ol>



<a name="how_do_i_import_an_x509_certificate"></a><h3>How do I import an X.509 certificate?</h3>
<p>To import an X.509 certificate (CER):</p>
<ol>
  <li>Navigate to <em>My Apps.</em>
    <ul class="usingUnorderedList">
      <li>Select the <strong>App  Name</strong> on the summary listing. The <em>App Details</em> page displays.</li>
      <li>Select an app version from the <strong>Current</strong> <strong>Version</strong> drop-down menu.</li>
    </ul>
</li>
  <li>Navigate to the <em>Security  </em>section and  click <strong>Show Keys</strong> to display the key generation options. In the <em>Public Key</em> section, click <strong>Import Credentials</strong>. The <em> Import Credentials </em> pop-up displays.</li>
  <li>Click <strong>Browse</strong> and navigate the directory structure to target your certificate file.</li>
  <li>Select the file and click <strong>Save</strong>.</li>
  <li>The X.509 Certificate is imported. If the CER you are attempting to  upload is expired or invalid, is not issued by any of the Trusted CA's on the Tenant, or a Certificate Authority does not exist on the Tenant you will receive an error message.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_export_credentials"></a><h3>How do I export app credentials?</h3>
<p>After the Certificate Signing Request is imported and the certificate is generated, you can download the app certificate.</p>
<p>To download the app certificate:</p>
<ol>
  <li>Navigate to <em>My Apps.</em>
    <ul class="usingUnorderedList">
      <li>Select the <strong>App  Name</strong> on the summary listing. The <em>App Details</em> page displays.</li>
      <li>Select an app version from the <strong>Current Version</strong> drop-down menu.</li>
    </ul>
</li>
  <li>Navigate to the <em>Security </em> &gt;<em> Public Key</em> section. Click <strong>Export Credentials</strong>. The <strong>Opening</strong> dialog box displays.</li>
  <li>To save the certificate file, click the <strong> Save file </strong>radio button.</li>
</ol>


<p><a href="#top">Back to top</a></p>



<a name="how_do_i_remove_app_credentials"></a><h3>How do I remove app credentials?</h3>
<p>If it becomes necessary to  change your app security credentials (e.g., certificate is nearing expiration  date, your private key becomes compromised, etc.), you can upload a new  Certificate Signing Request and regenerate the certificate for your app. This  is accomplished by removing the current set of credentials. You can then use the <strong>Import Credentials</strong> function to import a Certificate Signing Request (CSR).</p>
<h5>To remove app credentials:</h5>
<ol>
  <li>Navigate to <em> App Details &gt; Security</em>.</li>
  <li>Click <strong>Show Keys</strong> to display the key generation options. In the <em>Public Key</em> section,</li>
  <li>In the <em>Public Key</em> section, click <strong>Remove  Credentials</strong>. The credentials are removed.</li>
  <li>Use the <strong>Import Credentials</strong> function to import a new Certificate Signing Request (CSR). See <a href="#how_do_i_import_a_certificate_signing_request">How do I import a certificate signing request?</a></li>
</ol>


<p><a href="#top">Back to top</a></p>


  <div class = "divider1"></div>

